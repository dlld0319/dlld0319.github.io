[{"title":"搭配静态博客增加一个管理页面","url":"/2024/02/07/ld/日常/其它/1707276914900/","content":"> 部分代码 H5部分\n\n```html\n<div id=\"app\">\n        <div class=\"spinner-border\" role=\"status\" v-if=\"!loading\">\n            <span class=\"visually-hidden\">Loading...</span>\n        </div>\n        <div v-else style=\"padding: 20px;\">\n            <div v-if=\"!fileUrl&&!newFile\">\n                <button type=\"button\" class=\"btn btn-light\" @click=\"init()\">重新加载</button>\n                <button type=\"button\" class=\"btn btn-light\" @click=\"back()\">后退</button>\n                <button type=\"button\" class=\"btn btn-light\" @click=\"addFile()\">新建（默认为该目录下）</button>\n                <div>当前路径{{lujing}}</div>\n                <table class=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#序号</th>\n                            <th scope=\"col\">文件名称</th>\n                            <th scope=\"col\" style=\"max-width: 150px;\">路径</th>\n                            <th scope=\"col\">文件类型</th>\n                            <th>操作</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr v-for=\"(item,index) in mdList\" :key=\"index\">\n                            <th scope=\"row\">{{index+1}}</th>\n                            <td>{{item.name}}</td>\n                            <td style=\"max-width: 250px; overflow-x: auto;\">{{item.download_url}}</td>\n                            <td>{{item.type}}</td>\n                            <td>\n                                <button v-if=\"item.type=='dir'\" class=\"btn btn-light\"\n                                    @click=\"nextDir(item.path)\">下一层</button>\n                                <button type=\"button\" class=\"btn btn-light\" v-if=\"item.type!='dir'\"\n                                    @click=\"editFile(item.download_url);sha=item.sha;editPath=item.path\">编辑</button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div v-if=\"newFile\" class=\"mb-3\">\n                <label for=\"exampleFormControlInput1\" class=\"form-label\">请输入文件路径</label>\n                <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"请输入文件路径\"\n                    :value=\"newFile\">\n            </div>\n            <div v-if=\"fileUrl||newFile\" id=\"vditor\"></div>\n            <div v-if=\"fileUrl||newFile\" style=\"margin-left: 80%;\">\n                <button type=\"button\" class=\"btn btn-success\" @click=\"save()\" style=\"margin-right: 10px;\">保存</button>\n                <button type=\"button\" class=\"btn btn-danger\" @click=\"close()\">关闭</button>\n            </div>\n        </div>\n    </div>\n```\n\n> js 部分\n\n```js\nimport { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js';\n    import { Octokit, App } from \"https://esm.sh/octokit\";\n\n    createApp({\n        data() {\n            return {\n                loading: false,\n                owner: '',\n                repo: '',\n                branch: '',\n                path: 'source/_posts',\n                token: '',\n                user_name: '@126.com',\n                email: '@126.com',\n                getContentUrl: '',\n                adddocUrl: '',\n                /*MD文件的列表*/\n                mdList: [],\n                /*加载MD文件，并进行编辑*/\n                fileUrl: '',\n                contentEditor: '',\n                lujing: '',\n                sha: '',\n                editPath: '',\n                newFile: '',\n            }\n        },\n        async created() {\n            await this.init();\n            this.loading = true;\n        },\n        methods: {\n            async get(url) {\n                return new Promise((resolve, reject) => {\n                    fetch('https://api.github.com' + url).then(res => {\n                        res.json().then(res => {\n                            resolve(res)\n\n                        })\n                    })\n                })\n            },\n            async post(url, data) {\n                return new Promise((resolve, reject) => {\n                    fetch('https://api.github.com' + url, { method: 'POST', body: data }).then(res => {\n                        res.json().then(res => {\n                            resolve(res)\n                        })\n                    })\n                })\n            },\n            getContentUrlFunction() {\n                this.getContentUrl = `/repos/${this.owner}/${this.repo}/contents/${this.path}?ref=${this.branch}`\n            },\n            async init() {\n                this.getContentUrlFunction();\n                const result = await this.get(this.getContentUrl);\n                this.mdList = result;\n                console.log(this.mdList);\n                if (this.mdList.find(b => b.type == 'file')) {\n                    this.lujing = this.mdList.find(b => b.type == 'file').path.substr(0, this.mdList.find(b => b.type == 'file').path.lastIndexOf('/'))\n                } else {\n                    this.lujing = this.mdList.find(b => b.type == 'dir').path.substr(0, this.mdList.find(b => b.type == 'dir').path.lastIndexOf('/'))\n                }\n            },\n            nextDir(path) {\n                this.path = path;\n                this.init();\n            },\n            async streamToString(stream) {\n                const reader = stream.getReader();\n                let result = '';\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    result += value;\n                }\n                return result;\n            },\n            async editFile(url) {\n                this.fileUrl = url;\n                const dec = new TextDecoder(\"UTF-8\");\n                const str = await new Promise(async (resolve, reject) => {\n                    fetch(this.fileUrl).then(async response => {\n                        var str = await this.streamToString(response.body)\n                        console.log(dec.decode(new Uint8Array(str.split(','))))\n                        resolve(dec.decode(new Uint8Array(str.split(','))))\n                    })\n                })\n                this.contentEditor = new Vditor('vditor', {\n                    height: 800,\n                    toolbarConfig: {\n                        pin: true,\n                    },\n                    cache: {\n                        enable: false,\n                    },\n                    after: () => {\n                        this.contentEditor.setValue(str)\n                    },\n                })\n            },\n            save() {\n                this.upload();\n            },\n            close() {\n                this.fileUrl = '';\n                this.newFile = '';\n            },\n            back() {\n                this.path = this.path.substr(0, this.path.lastIndexOf('/'));\n                this.init();\n            },\n            adddoc(file) {\n                this.adddocUrl = `/repos/${this.owner}/${this.repo}/contents/${this.path}?ref=${this.branch}`\n                return `/repos/${this.owner}/${this.repo}/contents/${this.editPath}?ref=${this.branch}`\n            },\n            async upload() {\n                var loading =weui.loading('保存中',2000);\n                var Upurl = this.adddoc();\n                var sha = '';\n                var hpp_githubgetdocinit = {\n                    method: \"GET\",\n                    headers: {\n                        \"content-type\": \"application/json;charset=UTF-8\",\n                        \"user-agent\": \"HexoPlusPlus@1.2.0\",\n                        \"Authorization\": \"token \" + this.token\n                    },\n                }\n                sha = await new Promise((resolve) => {\n                    fetch('https://api.github.com' + Upurl, hpp_githubgetdocinit).then(res => {\n                        res.json().then(res => {\n                            resolve(res.sha);\n                        })\n                    })\n                })\n                const octokit = new Octokit({\n                    auth: this.token\n                });\n                if (this.newFile) {\n                    let base64 = btoa(String.fromCharCode(...new TextEncoder().encode(this.contentEditor.getValue())))\n\n                    await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {\n                        owner: this.owner,\n                        repo: this.repo,\n                        path: this.lujing + '/' + this.newFile,\n                        message: \"message \" + new Date().getTime(),\n                        committer: {\n                            name: this.user_name,\n                            email: this.email\n                        },\n                        content: base64,\n                        headers: {\n                            'X-GitHub-Api-Version': '2022-11-28'\n                        }\n                    })\n                } else {\n                    let base64 = btoa(String.fromCharCode(...new TextEncoder().encode(this.contentEditor.getValue())))\n                    await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {\n                        owner: this.owner,\n                        repo: this.repo,\n                        path: this.editPath,\n                        message: \"message \" + new Date().getTime(),\n                        committer: {\n                            name: this.user_name,\n                            email: this.email\n                        },\n                        content: base64,\n                        sha: sha,\n                        headers: {\n                            'X-GitHub-Api-Version': '2022-11-28'\n                        }\n                    })\n                }\n                loading.hide();\n                weui.toast('操作成功', 3000)\n                this.close();\n        },\n        async addFile() {\n            this.newFile = new Date().getTime() + '.md';\n            setTimeout(() => {\n                this.contentEditor = new Vditor('vditor', {\n                    height: 800,\n                    toolbarConfig: {\n                        pin: true,\n                    },\n                    cache: {\n                        enable: false,\n                    },\n                    after: () => {\n                        this.contentEditor.setValue('')\n                    },\n                })\n            }, 100);\n        },\n\n    }\n    }).mount('#app')\n```\n","categories":["小工具"]},{"title":"postgre01","url":"/2024/02/06/ld/日常/sql/postgre01/","content":"> postgre 中经常使用的脚本\n\n```sql\n行转列\nunnest(string_to_array(column_name , ','))\n\n列转行\nstring_agg(column_name , ',')\n\n\n```\n\n> 鉴权\n\n```sql\n\npermission denied for sequence XXXX_control_no_seq \n\n```\n\n> 重建索引\n\n```sql\nDO \n\n$$\n\nDECLARE  \n\n  table_name text;  \n\nBEGIN  \n\n  FOR table_name IN (SELECT tablename FROM pg_tables WHERE schemaname = 'node' )  \n\n  LOOP  \n\n   BEGIN  \n\n     EXECUTE 'ALTER TABLE node.' || table_name || ' ALTER COLUMN \"id\" SET START 104001' ;  \n\n  EXCEPTION  \n\n    WHEN OTHERS THEN  \n\n      RAISE NOTICE 'Caught an exception: %', SQLERRM; -- 捕获并打印异常信息  \n\n  END;  \n\n  END LOOP;  \n\nEND \n\n$$\n\n;\n```\n\n> 循环插入数据\n\n```sql\ndo $$\n\ndeclare\n\nv_idx integer := 1;\n\nbegin\n\n while v_idx < 1000 loop\n\n v_idx = v_idx+1;\n\ninsert into dbo.？\n\n( isreaded, isdeleted)\n\nOVERRIDING SYSTEM VALUE (select isreaded, isdeleted from dbo.？as tt order by id desc limit 1);\n\n end loop;\n\nend $$;\n\n```\n\n> 按照指定字段进行分组 并取一行\n\n```sql\nselect * from ( select ROW_NUMBER() over(partition by ss.?,ss.?, order by id desc) rn,* from\n\n\"dbo\".\"?\" as ss where ss.?=false and module='success') as sinfo where rn=1\n```\n\n> 删除表统计情报优化表性能\n\n```sql\nanalyze tablename\n```\n\n> 表增加索引 提高脚本执行效率\n\n```sql\ncreate index i_tablename_columnname on tablename(columnname);\n```\n","categories":["Sql"]},{"title":"各种工具","url":"/2024/02/05/ld/日常/tools/tools01/","content":"\n***用蓝奏分享***\n[蓝奏-devsidecar](https://dong0319.lanzoul.com/ioJmp1eqjsaj \"devsidecar\")\n[蓝奏-zerotier](https://dong0319.lanzoul.com/ipVo71eqjw7a \"zerotier\")\n[蓝奏-navicat](https://dong0319.lanzoul.com/b01fooayj密码:69kz \"navicat\")\n","tags":["工具链接"],"categories":["小技巧"]},{"title":"js 转换 csv to xlsx","url":"/2023/06/26/ld/work/js把csv转换xlsx，百万数据量/","content":"引用两个包\n```shell\nnpm i yarn\nyarn add node-xlsx\nyarn add csv-parse\n```\n\n代码\n\n```js\nconst fs = require(\"fs\");\nconst { parse } = require(\"csv-parse\");\nconst xlsx = require('node-xlsx');\ninputUrl='./name.csv';\noutputUrl='./name.xlsx';\nmaxNum=99999;\nlet rows = [];\nlet excelArr = []\nfunction formatToExcel(id,row0,rowsAll){\n    let writeRow=[Object.keys(row0)];\n    rowsAll.forEach((ois)=>{\n        const arr=[];\n        for (const key in ois) {\n            arr.push(ois[key]);\n        }\n        writeRow.push(arr);\n    });\n    excelArr.push({name:'sheet'+id,data:writeRow});\n}\n\nnew Promise(async (resolve, reject) => {\n    let ids=0;\n    fs.createReadStream(inputUrl)\n        .pipe(parse({ columns: true, relax_quotes: true, escape: '\\\"', ltrim: true, rtrim: true }))\n        .on(\"data\", function (row) {\n            rows.push(row);\n            if(rows.length>=maxNum){\n                formatToExcel(ids,row,rows);\n                rows=[];\n                ids++;\n                console.log('第'+ ids+'次 读取10w条数据');\n            }\n        })\n        .on(\"end\", function () {\n            formatToExcel(ids,rows[0],rows);\n            console.log(\"已全部读取\");\n            resolve('finished')\n        })\n        .on(\"error\", function (error) {\n            console.log(error.message);\n            reject(error)\n        });\n}).then(o => {\n    console.log('正在转换为excel，请稍后...\\n---------------- 数据量越大时间越长');\n    var buffer=xlsx.build(excelArr);\n    console.log('正在输出excel，请稍后...\\n---------------- 数据量越大时间越长');\n    fs.writeFile(outputUrl,buffer,function(err){\n        console.log('转换完成，'+(err?'导出时可能出现问题，':'')+'请检查导出文件核对数据');\n    })\n}\n).catch(o=>{\n    console.log(o);\n})\n\n\n\n```","categories":["小技巧"]},{"title":"js 自己写油猴","url":"/2023/05/24/ld/日常/nodejs学习/自定义youhou/","content":"\n```js\n//jianshu\nsetInterval(o=>{\n        document.getElementsByTagName('div')[document.getElementsByTagName('div').length-1].innerHTML='';\n        document.getElementsByTagName('div')[document.getElementsByTagName('div').length-2].innerHTML='';\n        document.getElementsByTagName('div')[document.getElementsByTagName('div').length-3].innerHTML='';\n        document.getElementsByTagName('div')[document.getElementsByTagName('div').length-4].innerHTML='';\n         document.getElementsByTagName('div')[document.getElementsByTagName('div').length-5].innerHTML='';\n            document.getElementsByTagName('div')[document.getElementsByTagName('div').length-7].innerHTML='';\n            document.getElementById('note').style='display:none';\n            document.getElementsByTagName('iframe')[0].style='display:none';\n        },8);\n```","categories":["code js"]},{"title":"frp内网穿透设置","url":"/2023/05/22/ld/日常/frp/frp/","content":"\nfrps.ini\n```shell\n[common]\nbind_port = 7000\ntoken = 12345678\n```\n启动 \n```shell\nfrps -c frps.ini\n```\n\nfrpc.ini\n```shell\n[common]\nserver_addr = ip\nserver_port = 7000\ntoken = 12345678\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 3389\nremote_port = 7005\n\n# 多端口穿透\n[range:FTP]\ntype = tcp\nlocal_port = 21,50000-50010\nremote_port = 2121,10000-10010\nlocal_ip = 127.0.0.1\n\n# http穿透\n[web1]\ntype = http\nlocal_port = 8080\ncustom_domains = xxx.xxx.xxx.xxx # 服务器ip\nlocations = / # eg：http://xxx.xxx.xxx.xxx/yolo/test\n```\n\n客户端启动\n```shell\nfrpc -c frpc.ini\n```\n\n\nlinux可以持久后台运行\n```\nnohup ./frpc -c frpc.ini >/dev/null 2>&1 &\nnohup ./frps -c frps.ini >/dev/null 2>&1 &\n```\n---------\n下载地址\n\n\n**[https://github.com/fatedier/frp/releases](https://github.com/fatedier/frp/releases)**","categories":["小技巧"]},{"title":"js 发送邮件","url":"/2023/05/22/ld/work/js邮件发送功能实现/","content":"**如题**\n```js\nfunction(){\n    options.from = '@126.com';\n        const transporter = createTransport({\n          port: 465,\n          secure: true, // secure:true for port 465, secure:false   for port 587\n          auth: {\n            user: '@126.com',\n            pass: '' // QQ邮箱需要使用授权码\n          },\n          host: 'smtp.126.com'\n        });\n        transporter.sendMail(options, (error, info) => {\n          if (error) {\n            return console.log(error);\n          }\n          console.log(`Message: ${info.messageId}`);\n          console.log(`sent: ${info.response}`);\n        });\n}\n```","categories":["小技巧"]},{"title":"苹果装机经验","url":"/2023/05/19/ld/日常/其它/黑苹果装机经验/","content":"\n\n- 第一步准备需要 先下载黑苹果镜像，并找适合的EFI\nefi是黑苹果引导和驱动 一般在github直接搜索芯片加 efi关键字就能找到\n比如我搜索的是 i38100 efi\n如果使用的是免驱显卡可操作范围就更大了，因为对应芯片的efi是为了核显驱动。23年了免驱的一般是amd显卡，购买偏向amd的比较好\n\n- 第二步将镜像写入u盘，u盘最好最小16g\n\n- 第三步 通过diskgenius 将u盘下的efi替换\n现在大部分用的都是oc 比较老的是用四叶草，不分贵贱。反正之后基本不会升级，升级驱动挂了基本没法用了。 还有需要把启动分区调整到300mb，都推荐300mb\n\n- 第四步 u盘uefi启动\n按照提示装机就行，启动不了就是efi不对，换就完了，正常装机会重启一次，重启的时候也要通过u盘启动继续到装完。\n\n- 第五步\n如果装好了就可以替换之前拷贝到u盘的efi到系统启动分区，之后启动就走的这个了\n\n\n---------\n镜像选择 在x86还是 Catalina最好  bigsur 也行，再往下就没有什么优化了，装新的性能不是很好","categories":["小技巧"]},{"title":"git排除追踪","url":"/2023/05/18/ld/work/git学习01/","content":"- 一种是直接在.gitignore中声明，这种所有人都受影响，并且不自由\n- 另一种是在隐藏文件.git 下 info文件夹 的exclude文件种增加相对路径，个人隐藏这种很舒服\n- 但是两种方法都是在文件上传后必须从仓库提交一次删除才能排除在项目外了\n\n1\n","categories":["小技巧"]},{"title":"nodejs 读取excel 处理数据 并导出","url":"/2023/05/18/ld/日常/nodejs学习/js学习02/","content":"*nodejs 读取excel 并生成新的excel文件*\n\n``` js\n// 引入 node-xlsx 模块\nconst xlsx = require('node-xlsx')\nvar fs=require('fs')\n\n// excel文件类径\nconst excelFilePath = './up.xlsx'\n\nconst sheets = xlsx.parse(excelFilePath);\n\nconst sheet = sheets[0];\nconsole.log(sheet);\n\n// 打印页面数据\nconsole.log(sheet.data);\n\n// 输出每行内容 在这里处理数据\nsheet.data.map(row => {\n    console.log(row);\n\trow[4]=row[2];\n    // 数组格式, 根据不同的索引取数据\n})\nlet excelArr = [\n\t{\n\t\t//data里面是数据，一个数组一行\n\t\t//column这一行是因为例子里需要一个头\n\t\tname: \"sheet\", data: sheet.data\n\t}\n]\nvar buffer=xlsx.build(excelArr);\nfs.writeFile('./write.xlsx',buffer,function(err){\n  console.log(err)\n})\n```","categories":["code js"]},{"title":"js 自动增加A-Z","url":"/2023/05/18/ld/日常/nodejs学习/js学习01/","content":"\n**自动增加A-Z**\n最多只支持到Z 后边需要自己写代码将Z之后堵死，或者到不了这么多就不用堵了\n优雅最重要\n\n```js\n\n\n//需要A之后的第几个\nconst num=\nString.fromCharCode('A'.charCodeAt(0) + num)\n\n\n```","categories":["code js"]},{"title":"python requests 增加header","url":"/2023/05/18/ld/日常/python学习/python学习01/","content":"**python requests 增加header**\n\n```python\n\nimport requests\nimport json\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',\n    \"Cookie\": \"MUSIC_A_T=1569983286727; \"\n}\n# https://music.163.com/#/my/m/music/playlist?id=3010181459\nx = requests.get('https://music.163.com/#/playlist?id=3010181459',headers=headers)\nprint(x.text);\n\n```","categories":["code python"]},{"title":"Docker打包学习","url":"/2023/05/18/ld/日常/其它/docker 打包学习/","content":"**打包docker基本脚本**\n- 首先需要选择基础镜像。一般选择这个 是体积最小的。\n如果使用特殊技术就选择对应技术使用的也可以，\n```shell\nFROM alpine:latest\n\nFROM node:14-alpine3.15\n```\n\n- 如果有需要可以设置时区，这个是独立项目需要的，比如我这只在本地跑一点代码\n\n```shell\n# 设置时区\nRUN apk add --no-cache tzdata \\\n    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\n    && echo \"Asia/Shanghai\" > /etc/timezone \\\n    && apk del tzdata\n```\n\n之后基于使用的技术添加包\n比如\npython 需要 python3和pip\n```shell\nRUN apk add python3 py-pip\nRUN pip3 install requests\nRUN pip3 install schedule\n```\n\n- 最后运行当前启动指令\n\n```shell\nCMD [ \"python\", \"jobs.py\" ]\n```\n\n-----\n\n这之下是通过github action 打包docker 脚本\n可支持多种平台x86  arm 等\n```yml\nname: Build dockers\n\non:\n  push:\n    branches:\n      - master\n    tags:\n      - '*'\n\n  workflow_dispatch:\n\njobs:\n\n  docker:\n    name: Build dockers\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: docker/setup-qemu-action@v2\n      - uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7\n\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_TOKEN }}\n\n      - name: build and push in master\n        uses: docker/build-push-action@v4\n        with:\n          push: true\n          tags: dlld0319/jobs:latest\n          context: .\n          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7\n```","categories":["docker"]},{"title":"苹果手机创建快捷地图方法其一","url":"/2023/04/29/ld/日常/其它/苹果手机地图使用技巧其1/","content":"**苹果手机创建快捷地图方法**\n\n高德api\n\n**[https://lbs.amap.com/tools/picker](https://lbs.amap.com/tools/picker)**\n\n腾讯地图api\n\n**[https://lbs.qq.com/getPoint/](https://lbs.qq.com/getPoint/)**\n\n苹果手机可以通过输入经纬度定位一个地点，通过快捷指令直接启动地图\n\n**iosamap://navi?sourceApplication=applicationName&poiname=龙湖&poiid=BGVIS&lat=38.859857&lon=121.438295&dev=1&style=0**","categories":["小技巧"]},{"title":"Node 版本管理工具","url":"/2023/04/21/ld/nice_tool_volta/","content":"\n[Volta](https://volta.sh/ \"安装替代nvm版本管理工具，直接锁定项目的nodejs版本\")","tags":["工具链接"],"categories":["小技巧"]},{"title":"Navicat Premium 15\\16 重置试用时间","url":"/2023/04/20/ld/navicat_reset/","content":"\n\n- 创建一个bat 文件即可\n\n```bat\n\n\n@echo off\n\necho\\\necho\\\necho 适用于 Navicat V15 V16\necho 正在清除试用信息。。。\n\nfor /f %%i in ('reg query HKCU\\Software\\Classes\\CLSID') do call:checkDelCLSID %%i\n\n#reg delete HKCR\\NavicatProfileBackup /f 1>nul 2>nul \n#reg delete HKCR\\NavicatProfileBatchJob /f 1>nul 2>nul\n#reg delete HKCR\\NavicatProfileDataSync /f 1>nul 2>nul\n#reg delete HKCR\\NavicatProfileExport /f 1>nul 2>nul\n#reg delete HKCR\\NavicatProfileImport /f 1>nul 2>nul\n#reg delete HKCR\\NavicatProfileModel /f 1>nul 2>nul\n#reg delete HKCR\\NavicatProfileStructureSync /f 1>nul 2>nul\n#reg delete HKCR\\NavicatProfileTransfer /f 1>nul 2>nul\nreg delete HKCU\\Software\\PremiumSoft\\NavicatPremium /f 1>nul 2>nul\nreg add HKCU\\Software\\PremiumSoft\\NavicatPremium /v \"AlreadyShowNavicatV16WelcomeScreen\" /t REG_DWORD  /d 1 /f\nreg add HKCU\\Software\\PremiumSoft\\NavicatPremium /v \"AutoCheckUpdate\" /t REG_DWORD /d 1 /f\nreg add HKCU\\Software\\PremiumSoft\\NavicatPremium /v \"AlreadyScanDeprecatedReport\" /t REG_DWORD /d 1 /f\nreg add HKCU\\Software\\PremiumSoft\\NavicatPremium\\Update /v \"LastCheckTime\" /t REG_SZ /d 1 /f\n\nrmdir /S /Q C:\\Users\\XXXX\\Documents\\Navicat\nrmdir /S /Q C:\\Users\\XXXX\\AppData\\Local\\Temp\\NavicatCloud\n\necho\\\necho\\\necho 清除试用信息成功！\necho 请重新运行Navicat。\necho\\\npause\nexit\n\n\n:checkDelCLSID\necho filtering %1\necho %1|findstr \"{CAFEEFAC-\" 1>nul 2>nul\nset result=%errorlevel%\nif %result%==0 goto:eof\n\necho checking %1\nreg query %1\\Info 1>nul 2>nul\nset result=%errorlevel%\nif %result%==1 goto:eof\n\necho deleteing %1\nreg delete %1 /f 1>nul 2>nul\n\ngoto:eof\n\n\n```\n\n\n```\n无限期每5分钟执行一次\nschtasks /create /tn test_task /tr C:\\wwwroot\\hexo\\gitpull.bat /sc  minute /mo 5  \n```","tags":["code"],"categories":["小技巧"]},{"title":"SwitchHosts小工具","url":"/2023/04/19/ld/work/工作上发现的switchhost/","content":"**SwitchHosts 工具可以直接修改host**\n\n通过新建host直接附加到现有的host上\n\n但使用的技术是基于nodejs的 Electron 占用资源使用起来很难受，只用在跑特定代码的时候好了","categories":["小技巧"]},{"title":"Hello World","url":"/2023/03/24/hello-world/","content":"testtesttest\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start \n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"},{"title":"Hello World2","url":"/2023/03/24/1707269574720/","content":"22\n\n😄\n\n33\n\n44\n\n\n| col1 | col2 | col3 |\n| ---- | ---- | ---- |\n|      |      |      |\n|      |      |      |\n\n55\n\n66\n"},{"title":"通过html编辑 将html转化为markdown","url":"/2023/01/01/ld/html_to_markdown/","content":"### HTML TO MARKDOWN\n\n[html编辑器](https://uutool.cn/ckeditor4/ \"html editor\")\n\n[我们在html里编辑然后把它转化成markdown](https://www.ivtool.com/html-to-markdown/ \"html to markdown\")\n","tags":["工具链接"],"categories":["小技巧"]}]